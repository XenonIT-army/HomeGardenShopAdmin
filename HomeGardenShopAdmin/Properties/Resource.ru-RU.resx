<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="String1" xml:space="preserve">
    <value>Привет я бот админ магазина HomeGardenShop, через меня ты можешь создавать новые продукты и категории к ним и много другого!</value>
  </data>
  <data name="String10" xml:space="preserve">
    <value>Чтобы найти новость укажи тег get news id новости</value>
  </data>
  <data name="String11" xml:space="preserve">
    <value>Новости могут быть двух типов: с картинкой и без.\nЧто бы создать новость с картинкой выбери фото из галереи и сделай к нему подпись.\nДля новости без картинки можно использовать просто сообщение.\nВ тексте обязательно укажи теги create news nameRU:...;nameUA:...;nameEN:...;descRU:...;descUA:...;descEN:...; это название и описание новости. Можно указать  по одному тегу названия и описания тогда текст продублируется на остальные языки.</value>
  </data>
  <data name="String12" xml:space="preserve">
    <value>Чтобы удалить новость укажи тег remove news и id новости.</value>
  </data>
  <data name="String13" xml:space="preserve">
    <value>Чтобы редактировать новость укажи тег edit news id новости и любое поле например: nameRU:...;</value>
  </data>
  <data name="String14" xml:space="preserve">
    <value>Выбери фильтр поиска продукта!</value>
  </data>
  <data name="String15" xml:space="preserve">
    <value>Что бы найти продукт по категории укажи теги get prod category id категории.</value>
  </data>
  <data name="String16" xml:space="preserve">
    <value>Что бы найти продукт по названию укажи теги get prod name... ключевые слова для поиска.</value>
  </data>
  <data name="String17" xml:space="preserve">
    <value>Что бы найти продукт по цене укажи теги get prod price ... диапазон цен, например 100 - 300.</value>
  </data>
  <data name="String18" xml:space="preserve">
    <value>Что бы найти продукт по категории укажи теги get prod id продукта.</value>
  </data>
  <data name="String19" xml:space="preserve">
    <value>Что бы создать продукт выбери фото из галереи и сделай к нему подпись.\nВ тексте обязательно укажи теги create prod nameRU:...;nameUA:...;nameEN:...;descRU:...;descUA:...;descEN:...;prodcount:...;categoryId:...;prodprice:...;proddiscount:...; Можно указать  по одному тегу названия и описания тогда текст продублируется на остальные языки.</value>
  </data>
  <data name="String2" xml:space="preserve">
    <value>Выбери категорию</value>
  </data>
  <data name="String20" xml:space="preserve">
    <value>Чтобы удалить продукт укажи тег remove prod и id.</value>
  </data>
  <data name="String21" xml:space="preserve">
    <value>Чтобы редактировать продукт укажи тег edit prod id продукта и любое поле например: nameRU:...;price:...;</value>
  </data>
  <data name="String22" xml:space="preserve">
    <value>Чтобы найти категорию укажи тег get category id новости</value>
  </data>
  <data name="String23" xml:space="preserve">
    <value>Что бы создать категорию укажи теги create category nameRU:...;nameUA:...;nameEN:...; Можно указать один тег названия тогда текст продублируется на остальные языки.</value>
  </data>
  <data name="String24" xml:space="preserve">
    <value>Чтобы удалить категорию укажи тег remove category и id категории. Важно: при удалении категории все товары данной категории так же удаляются!</value>
  </data>
  <data name="String25" xml:space="preserve">
    <value>Чтобы редактировать категорию укажи тег edit category id категории и любое поле например: nameRU:...;</value>
  </data>
  <data name="String26" xml:space="preserve">
    <value>Важно: при создании категории о нас, прошлая категория о нас удалиться!</value>
  </data>
  <data name="String27" xml:space="preserve">
    <value>Что бы создать категорию о нас укажи теги create aboutUs nameCompany:...;descriptionRU:...;descriptionUA:...;descriptionEN:...; Можно указать один тег описания тогда текст продублируется на остальные языки.</value>
  </data>
  <data name="String28" xml:space="preserve">
    <value>Чтобы удалить категорию о нас укажи тег remove aboutUs.</value>
  </data>
  <data name="String29" xml:space="preserve">
    <value>Чтобы редактировать категорию о нас укажи тег edit aboutUs и любое поле например: nameCompany:...;</value>
  </data>
  <data name="String3" xml:space="preserve">
    <value>Ты выбрал категорию: Новости!</value>
  </data>
  <data name="String30" xml:space="preserve">
    <value>Чат закрыт, что бы начать заново напиши start. Буду тебя ждать!</value>
  </data>
  <data name="String31" xml:space="preserve">
    <value>Данная команда не найдена;</value>
  </data>
  <data name="String32" xml:space="preserve">
    <value>Новости</value>
  </data>
  <data name="String33" xml:space="preserve">
    <value>Продукты</value>
  </data>
  <data name="String34" xml:space="preserve">
    <value>Категории</value>
  </data>
  <data name="String35" xml:space="preserve">
    <value>Заказы</value>
  </data>
  <data name="String36" xml:space="preserve">
    <value>О нас</value>
  </data>
  <data name="String37" xml:space="preserve">
    <value>Выйти</value>
  </data>
  <data name="String38" xml:space="preserve">
    <value>Показать все</value>
  </data>
  <data name="String39" xml:space="preserve">
    <value>Найти</value>
  </data>
  <data name="String4" xml:space="preserve">
    <value>Что нужно сделать?</value>
  </data>
  <data name="String40" xml:space="preserve">
    <value>Создать</value>
  </data>
  <data name="String41" xml:space="preserve">
    <value>Удалить</value>
  </data>
  <data name="String42" xml:space="preserve">
    <value>Изменить</value>
  </data>
  <data name="String43" xml:space="preserve">
    <value>Назад</value>
  </data>
  <data name="String44" xml:space="preserve">
    <value>Показать</value>
  </data>
  <data name="String45" xml:space="preserve">
    <value>Категория</value>
  </data>
  <data name="String46" xml:space="preserve">
    <value>Название</value>
  </data>
  <data name="String47" xml:space="preserve">
    <value>Цена</value>
  </data>
  <data name="String5" xml:space="preserve">
    <value>Ты выбрал категорию: Категории товаров!</value>
  </data>
  <data name="String6" xml:space="preserve">
    <value>Ты выбрал категорию: Продукты!</value>
  </data>
  <data name="String7" xml:space="preserve">
    <value>Ты выбрал категорию: Заказы!</value>
  </data>
  <data name="String8" xml:space="preserve">
    <value>К сожалению данная категория пока не доступна!</value>
  </data>
  <data name="String9" xml:space="preserve">
    <value>Ты выбрал категорию: О нас!</value>
  </data>
</root>