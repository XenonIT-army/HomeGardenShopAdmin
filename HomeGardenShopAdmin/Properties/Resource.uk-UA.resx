<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="String1" xml:space="preserve">
    <value>Привіт я бот адмін магазину HomeGardenShop, через мене ти можеш створювати нові продукти та категорії до них та багато іншого!</value>
  </data>
  <data name="String10" xml:space="preserve">
    <value>Щоб знайти новину, вкажи тег get news id новини</value>
  </data>
  <data name="String11" xml:space="preserve">
    <value>Новини можуть бути двох типів: з картинкою і без.\пЩоб створити новину з картинкою обери фото з галереї і зроби до нього підпис.\пДля новини без картинки можна використовувати просто повідомлення.\пУ тексті обов'язково впиши теги create news nameRU: ...; nameUA: ...; nameEN: ...; nameEN: ...; descRU: ...; descUA: ...; descEN: ...; це назва і опис новини. Можна вказати по одному тегу назви й опису, тоді текст продублюється іншими мовами.</value>
  </data>
  <data name="String12" xml:space="preserve">
    <value>Щоб видалити новину, вкажи тег remove news і id новини.</value>
  </data>
  <data name="String13" xml:space="preserve">
    <value>Щоб редагувати новину, вкажіть тег edit news id новини та будь-яке поле наприклад: nameRU:...;</value>
  </data>
  <data name="String14" xml:space="preserve">
    <value>Виберіть фільтр пошуку продукту!</value>
  </data>
  <data name="String15" xml:space="preserve">
    <value>Щоб знайти продукт за категорією вкажіть теги get prod category id категорії.</value>
  </data>
  <data name="String16" xml:space="preserve">
    <value>Щоб знайти продукт за назвою, вкажіть теги get prod name... ключові слова для пошуку.</value>
  </data>
  <data name="String17" xml:space="preserve">
    <value>Щоб знайти продукт за ціною вкажіть теги get prod price ... діапазон цін, наприклад 100 - 300.</value>
  </data>
  <data name="String18" xml:space="preserve">
    <value>Щоб знайти продукт за категорією вкажи теги get prod id продукту.</value>
  </data>
  <data name="String19" xml:space="preserve">
    <value>Щоб створити продукт, вибери фото з галереї і зроби до нього підпис.\nУ тексті обов'язково вкажи теги create prod nameRU:...;nameUA:...;nameEN:...;descRU:...;descUA:.. .;descEN:...;count:...;categoryId:...;price:...;discountPrice:...; Можна вказати по одному тегу назви та опису, тоді текст продублюється на інші мови.</value>
  </data>
  <data name="String2" xml:space="preserve">
    <value>Вибери категорію</value>
  </data>
  <data name="String20" xml:space="preserve">
    <value>Щоб видалити продукт, вкажи тег remove prod і id.</value>
  </data>
  <data name="String21" xml:space="preserve">
    <value>Щоб редагувати продукт вкажіть тег edit prod id продукту та будь-яке поле наприклад: nameRU:...;price:...;</value>
  </data>
  <data name="String22" xml:space="preserve">
    <value>Щоб знайти категорію, вкажи тег get category id новини</value>
  </data>
  <data name="String23" xml:space="preserve">
    <value>Щоб створити категорію, вкажи теги create category nameRU:...;nameUA:...;nameEN:...; Можна вказати один тег назви, тоді текст продублюється на інші мови.</value>
  </data>
  <data name="String24" xml:space="preserve">
    <value>Щоб видалити категорію, вкажи тег remove category та id категорії. Важливо: при видаленні категорії всі товари цієї категорії також видаляються!</value>
  </data>
  <data name="String25" xml:space="preserve">
    <value>Щоб редагувати категорію, вкажи тег edit category id категорії та будь-яке поле наприклад: nameRU:...;</value>
  </data>
  <data name="String26" xml:space="preserve">
    <value>Важливо: при створенні категорії про нас минула категорія про нас піти!</value>
  </data>
  <data name="String27" xml:space="preserve">
    <value>Щоб створити категорію про нас вкажи теги create aboutUs nameCompany:...;descriptionRU:...;descriptionUA:...;descriptionEN:...; Можна вказати один тег опису, тоді текст продублюється на інші мови.</value>
  </data>
  <data name="String28" xml:space="preserve">
    <value>Щоб видалити категорію про нас, вкажи тег remove aboutUs.</value>
  </data>
  <data name="String29" xml:space="preserve">
    <value>Щоб редагувати категорію про нас, вкажи тег edit aboutUs і будь-яке поле наприклад: nameCompany:...;</value>
  </data>
  <data name="String3" xml:space="preserve">
    <value>Ти вибрав категорію: Новини!</value>
  </data>
  <data name="String30" xml:space="preserve">
    <value>Чат закритий, щоб почати знову напиши start. Чекатиму тебе!</value>
  </data>
  <data name="String31" xml:space="preserve">
    <value>Ця команда не знайдена;</value>
  </data>
  <data name="String32" xml:space="preserve">
    <value>Новини</value>
  </data>
  <data name="String33" xml:space="preserve">
    <value>Продукти</value>
  </data>
  <data name="String34" xml:space="preserve">
    <value>Категорії</value>
  </data>
  <data name="String35" xml:space="preserve">
    <value>Замовлення</value>
  </data>
  <data name="String36" xml:space="preserve">
    <value>Про нас</value>
  </data>
  <data name="String37" xml:space="preserve">
    <value>Вийти</value>
  </data>
  <data name="String38" xml:space="preserve">
    <value>Показати все</value>
  </data>
  <data name="String39" xml:space="preserve">
    <value>Знайти</value>
  </data>
  <data name="String4" xml:space="preserve">
    <value>Що потрібно зробити?</value>
  </data>
  <data name="String40" xml:space="preserve">
    <value>Створити</value>
  </data>
  <data name="String41" xml:space="preserve">
    <value>Видалити</value>
  </data>
  <data name="String42" xml:space="preserve">
    <value>Змінити</value>
  </data>
  <data name="String43" xml:space="preserve">
    <value>Назад</value>
  </data>
  <data name="String44" xml:space="preserve">
    <value>Показати</value>
  </data>
  <data name="String45" xml:space="preserve">
    <value>Категорія</value>
  </data>
  <data name="String46" xml:space="preserve">
    <value>Назва</value>
  </data>
  <data name="String47" xml:space="preserve">
    <value>Ціна</value>
  </data>
  <data name="String5" xml:space="preserve">
    <value>Ви вибрали категорію: Категорії товарів!</value>
  </data>
  <data name="String6" xml:space="preserve">
    <value>Ви вибрали категорію: Продукти!</value>
  </data>
  <data name="String7" xml:space="preserve">
    <value>Ти обрав категорію: Замовлення!</value>
  </data>
  <data name="String8" xml:space="preserve">
    <value>На жаль, дана категорія поки не доступна!</value>
  </data>
  <data name="String9" xml:space="preserve">
    <value>Ти вибрав категорію: Про нас!</value>
  </data>
</root>