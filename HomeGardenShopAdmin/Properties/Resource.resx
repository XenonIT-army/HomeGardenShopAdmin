<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="String1" xml:space="preserve">
    <value>Hello, I'm a bot admin of HomeGardenShop store, through me you can create new products and categories for them and much more!</value>
  </data>
  <data name="String10" xml:space="preserve">
    <value>To find news, specify the tag: "get news id"</value>
  </data>
  <data name="String11" xml:space="preserve">
    <value>News can be of two types: with and without a picture.\nTo create a news story with a picture, select a photo from the gallery and add a caption to it.\nFor news without a picture, you can use just a message.\nIn the text, be sure to include the tags create news nameRU:.. .;nameUA:...;nameEN:...;descRU:...;descUA:...;descEN:...; this is the title and description of the news. You can specify one title and description tag each, then the text will be duplicated in other languages.</value>
  </data>
  <data name="String12" xml:space="preserve">
    <value>To remove news, specify the remove news tag and the news id.</value>
  </data>
  <data name="String13" xml:space="preserve">
    <value>To edit the news, specify the edit news id tag of the news and any field, for example: nameRU:...;</value>
  </data>
  <data name="String14" xml:space="preserve">
    <value>Choose a product search filter!</value>
  </data>
  <data name="String15" xml:space="preserve">
    <value>To find a product by category, specify the get prod category id tags for the category.</value>
  </data>
  <data name="String16" xml:space="preserve">
    <value>To find a product by name, specify the get prod name... tags for search keywords.</value>
  </data>
  <data name="String17" xml:space="preserve">
    <value>To find a product by price, specify the get prod price ... price range, for example 100 - 300.</value>
  </data>
  <data name="String18" xml:space="preserve">
    <value>To find a product by category, specify the get prod id tags for the product.</value>
  </data>
  <data name="String19" xml:space="preserve">
    <value>To create a product, select a photo from the gallery and make a caption for it.\nIn the text, be sure to include the tags create prod nameRU:...;nameUA:...;nameEN:...;descRU:...;descUA:...;descEN:...;prodcount:...;categoryId:...;prodprice:...;proddiscount:...; You can specify one title and description tag each, then the text will be duplicated in other languages.</value>
  </data>
  <data name="String2" xml:space="preserve">
    <value>Choose a category</value>
  </data>
  <data name="String20" xml:space="preserve">
    <value>To remove a product, specify the remove prod tag and id.</value>
  </data>
  <data name="String21" xml:space="preserve">
    <value>To edit a product, specify the edit prod id tag of the product and any field, for example: nameRU:...;price:...;</value>
  </data>
  <data name="String22" xml:space="preserve">
    <value>To find a category, specify the tag get category id news</value>
  </data>
  <data name="String23" xml:space="preserve">
    <value>To create a category, specify the tags create category nameRU:...;nameUA:...;nameEN:...; You can specify one title tag, then the text will be duplicated in other languages.</value>
  </data>
  <data name="String24" xml:space="preserve">
    <value>To remove a category, specify the remove category tag and the category id. Important: when deleting a category, all products of this category are also deleted!</value>
  </data>
  <data name="String25" xml:space="preserve">
    <value>To edit a category, specify the edit category id tag of the category and any field, for example: nameRU:...;</value>
  </data>
  <data name="String26" xml:space="preserve">
    <value>Important: when creating a category about us, the previous category about us will be deleted!</value>
  </data>
  <data name="String27" xml:space="preserve">
    <value>To create a category about us, specify the tags create aboutUs nameCompany:...;descriptionRU:...;descriptionUA:...;descriptionEN:...; You can specify one description tag, then the text will be duplicated in other languages.</value>
  </data>
  <data name="String28" xml:space="preserve">
    <value>To remove the about us category, specify the remove aboutUs tag.</value>
  </data>
  <data name="String29" xml:space="preserve">
    <value>To edit the about us category, specify the edit aboutUs tag and any field, for example: nameCompany:...;</value>
  </data>
  <data name="String3" xml:space="preserve">
    <value>You have selected a category: News!</value>
  </data>
  <data name="String30" xml:space="preserve">
    <value>The chat is closed, to start again type start. I will wait for you!</value>
  </data>
  <data name="String31" xml:space="preserve">
    <value>This command was not found;</value>
  </data>
  <data name="String32" xml:space="preserve">
    <value>News</value>
  </data>
  <data name="String33" xml:space="preserve">
    <value>Products</value>
  </data>
  <data name="String34" xml:space="preserve">
    <value>Categories</value>
  </data>
  <data name="String35" xml:space="preserve">
    <value>Orders</value>
  </data>
  <data name="String36" xml:space="preserve">
    <value>About Us</value>
  </data>
  <data name="String37" xml:space="preserve">
    <value>Go out</value>
  </data>
  <data name="String38" xml:space="preserve">
    <value>Show all</value>
  </data>
  <data name="String39" xml:space="preserve">
    <value>Find</value>
  </data>
  <data name="String4" xml:space="preserve">
    <value>What to do?</value>
  </data>
  <data name="String40" xml:space="preserve">
    <value>Create</value>
  </data>
  <data name="String41" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="String42" xml:space="preserve">
    <value>Change</value>
  </data>
  <data name="String43" xml:space="preserve">
    <value>Back</value>
  </data>
  <data name="String44" xml:space="preserve">
    <value>Show</value>
  </data>
  <data name="String45" xml:space="preserve">
    <value>Category</value>
  </data>
  <data name="String46" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="String47" xml:space="preserve">
    <value>Price</value>
  </data>
  <data name="String5" xml:space="preserve">
    <value>You have selected a category: Product categories!</value>
  </data>
  <data name="String6" xml:space="preserve">
    <value>You have selected a category: Products!</value>
  </data>
  <data name="String7" xml:space="preserve">
    <value>You have selected a category: Orders!</value>
  </data>
  <data name="String8" xml:space="preserve">
    <value>Sorry, this category is not yet available!</value>
  </data>
  <data name="String9" xml:space="preserve">
    <value>You have chosen a category: About us!</value>
  </data>
</root>